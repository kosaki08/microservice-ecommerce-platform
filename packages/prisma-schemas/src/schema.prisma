generator client {
  provider      = "prisma-client-js"
  output        = "./generated/client"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// *************************************************
// User
// *************************************************

enum AccountStatus {
  ACTIVE
  SUSPENDED
  LOCKED
  INACTIVE
}

enum AddressType {
  HOME
  WORK
  OTHER
}

model Account {
  id                String        @id @default(uuid())
  email             String        @unique
  password_hash     String
  status            AccountStatus
  is_verified       Boolean       @default(false)
  email_verified_at DateTime?
  last_login_at     DateTime?
  created_at        DateTime      @default(now())
  updated_at        DateTime      @updatedAt
  deleted_at        DateTime?
  deleted_email     String? // ソフトデリート時の元のメールアドレスを保持

  profile Profile?
  address Address[]
  session Session[]

  @@unique([email, deleted_at]) // ソフトデリート対応のユニーク制約
}

model Profile {
  id          String    @id @default(uuid())
  account_id  String    @unique
  first_name  String
  last_name   String
  phone       String?
  birth_date  DateTime?
  language    String?
  preferences Json?     @db.JsonB // { theme: "dark" | "light" }
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt

  account Account @relation(fields: [account_id], references: [id])

  @@index([account_id])
}

model Address {
  id             String      @id @default(uuid())
  account_id     String
  type           AddressType
  postal_code    String
  prefecture     String
  city           String
  street_address String
  building       String?
  phone          String?
  is_default     Boolean     @default(false)
  created_at     DateTime    @default(now())
  updated_at     DateTime    @updatedAt

  account Account @relation(fields: [account_id], references: [id])

  @@index([account_id])
}

model Session {
  id         String   @id @default(uuid())
  account_id String
  token      String
  ip_address String?
  user_agent String?
  expires_at DateTime
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  account Account @relation(fields: [account_id], references: [id])

  @@index([account_id])
  @@index([token])
}

// *************************************************
// Product
// *************************************************

model Category {
  id            String    @id @default(uuid())
  parent_id     String?
  name          String
  slug          String    @unique
  description   String?
  display_order Int?
  is_visible    Boolean   @default(true)
  metadata      Json?     @db.JsonB
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  deleted_at    DateTime?

  parent        Category?  @relation("Subcategory", fields: [parent_id], references: [id])
  subcategories Category[] @relation("Subcategory")
  products      Product[]

  @@index([parent_id])
  @@index([slug])
}

enum ProductStatus {
  DRAFT
  ACTIVE
  INACTIVE
  DISCONTINUED
}

model Product {
  id             String        @id @default(uuid())
  category_id    String
  name           String
  slug           String        @unique
  description    String?
  base_price     Decimal       @db.Decimal(10, 0)
  status         ProductStatus
  // specifications schema:
  // {
  //   weight: number
  //   dimensions: {
  //     width: number
  //     height: number
  //     depth: number
  //   }
  // }
  specifications Json?         @db.JsonB
  brand          String?
  created_at     DateTime      @default(now())
  updated_at     DateTime      @updatedAt
  deleted_at     DateTime?

  category Category         @relation(fields: [category_id], references: [id])
  variants ProductVariant[]
  images   ProductImage[]

  @@index([category_id])
  @@index([status, category_id])
  @@index([name])
}

enum VariantStatus {
  ACTIVE
  INACTIVE
  OUT_OF_STOCK
}

model ProductVariant {
  id               String        @id @default(uuid())
  product_id       String
  sku              String        @unique
  attributes       Json?         @db.JsonB
  price_adjustment Decimal       @db.Decimal(10, 0)
  status           VariantStatus
  created_at       DateTime      @default(now())
  updated_at       DateTime      @updatedAt

  product Product @relation(fields: [product_id], references: [id])
  stock   Stock?

  @@index([product_id])
  @@index([sku])
}

model ProductImage {
  id            String   @id @default(uuid())
  product_id    String
  url           String
  alt_text      String?
  display_order Int?
  is_primary    Boolean  @default(false)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  product Product @relation(fields: [product_id], references: [id])

  @@index([product_id])
}

enum StockStatus {
  IN_STOCK
  LOW_STOCK
  OUT_OF_STOCK
  DISCONTINUED
}

model Stock {
  id                  String      @id @default(uuid())
  variant_id          String      @unique
  quantity            Int
  reserved_quantity   Int
  available_quantity  Int
  low_stock_threshold Int?
  status              StockStatus
  last_counted_at     DateTime?
  created_at          DateTime    @default(now())
  updated_at          DateTime    @updatedAt

  variant   ProductVariant @relation(fields: [variant_id], references: [id])
  movements Movement[]

  @@index([status])
}

enum MovementType {
  PURCHASE
  SALE
  RETURN
  ADJUSTMENT
  INVENTORY_COUNT
}

model Movement {
  id              String       @id @default(uuid())
  stock_id        String
  quantity_change Int
  movement_type   MovementType
  reference_id    String?
  reference_type  String?
  metadata        Json?        @db.JsonB
  created_by      String?
  created_at      DateTime     @default(now())

  stock Stock @relation(fields: [stock_id], references: [id])

  @@index([stock_id])
  @@index([movement_type])
}

// *************************************************
// Payment
// *************************************************

enum PaymentMethod {
  CREDIT_CARD
  BANK_TRANSFER
  CONVENIENCE_STORE
  DIGITAL_WALLET
}

enum TransactionStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

enum RefundStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

model Transaction {
  id                 String            @id @default(uuid())
  order_id           String
  payment_method     PaymentMethod
  amount             Decimal           @db.Decimal(10, 0)
  currency           String            @default("JPY")
  status             TransactionStatus
  provider           String
  provider_reference String?
  error_message      String?
  retry_count        Int               @default(0)
  metadata           Json?             @db.JsonB
  processed_at       DateTime?
  created_at         DateTime          @default(now())
  updated_at         DateTime          @updatedAt

  refund Refund[]

  @@index([order_id])
  @@index([payment_method])
  @@index([status, created_at])
}

model Refund {
  id                 String       @id @default(uuid())
  transaction_id     String
  amount             Decimal      @db.Decimal(10, 0)
  reason             String
  status             RefundStatus
  provider_reference String?
  metadata           Json?        @db.JsonB
  processed_at       DateTime?
  created_at         DateTime     @default(now())
  updated_at         DateTime     @updatedAt

  transaction Transaction @relation(fields: [transaction_id], references: [id])

  @@index([transaction_id])
}

// *************************************************
// Order
// *************************************************

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

model Order {
  id                 String      @id @default(uuid())
  account_id         String
  subtotal           Decimal     @db.Decimal(10, 0)
  tax                Decimal     @db.Decimal(10, 0)
  shipping_fee       Decimal     @db.Decimal(10, 0)
  total_amount       Decimal     @db.Decimal(10, 0)
  status             OrderStatus
  shipping_address   Json        @db.JsonB
  billing_address    Json        @db.JsonB
  shipping_method    String?
  estimated_delivery DateTime?
  created_by         String?
  created_at         DateTime    @default(now())
  updated_at         DateTime    @updatedAt

  orderItem     OrderItem[]
  statusHistory StatusHistory[]

  @@index([account_id])
  @@index([created_at])
  @@index([status, created_at])
}

model OrderItem {
  id               String   @id @default(uuid())
  order_id         String
  variant_id       String
  quantity         Int
  unit_price       Decimal  @db.Decimal(10, 0)
  tax_rate         Decimal  @db.Decimal(5, 2)
  tax_amount       Decimal  @db.Decimal(10, 0)
  subtotal         Decimal  @db.Decimal(10, 0)
  product_snapshot Json     @db.JsonB
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt

  order Order @relation(fields: [order_id], references: [id])

  @@index([order_id])
  @@index([variant_id])
}

enum OrderEventType {
  STATUS_CHANGED
  PAYMENT_CONFIRMED
  SHIPPING_UPDATED
  DELIVERY_CONFIRMED
  CANCELLED
  REFUNDED
}

model StatusHistory {
  id              String         @id @default(uuid())
  order_id        String
  previous_status String?
  new_status      String
  event_type      OrderEventType
  comment         String?
  changed_by      String?
  created_at      DateTime       @default(now())

  order Order @relation(fields: [order_id], references: [id])

  @@index([order_id])
}
