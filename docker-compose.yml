services:
  vault-service:
    build:
      context: .
      dockerfile: ./apps/rest-backend/services/vault-service/Dockerfile
    ports:
      - "3010:3010"
    volumes:
      - ./apps/rest-backend/services/vault-service/src:/app/apps/rest-backend/services/vault-service/src
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - VAULT_ADDR=http://vault:8200
      - VAULT_TOKEN=root_token_for_development
      - AUTH_TOKEN_TTL=1h
      - ROTATION_SCHEDULE=0 0 * * * # 毎日0時にローテーション
      - LOG_LEVEL=debug
    depends_on:
      - vault

  vault:
    image: vault:1.13.3
    container_name: vault
    ports:
      - "8200:8200"
    environment:
      - VAULT_DEV_ROOT_TOKEN_ID=root_token_for_development
      - VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200
      - VAULT_ADDR=http://0.0.0.0:8200
    cap_add:
      - IPC_LOCK
    command: server -dev

  user-service:
    build:
      context: .
      dockerfile: ./apps/rest-backend/services/user-service/Dockerfile
    ports:
      - "3001:3001"
    volumes:
      - ./apps/rest-backend/services/user-service/src:/app/apps/rest-backend/services/user-service/src
      - /app/node_modules
    environment:
      - DATABASE_URL=postgresql://user:password@postgres:5432/ecommerce
      - REDIS_URL=redis://redis:6379
      - NODE_ENV=development
    depends_on:
      - postgres
      - redis

  rest-frontend:
    build:
      context: .
      dockerfile: ./apps/rest-frontend/Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ./apps/rest-frontend/src:/app/apps/rest-frontend/src
      - ./packages/ui:/app/packages/ui
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - VAULT_SERVICE_URL=http://vault-service:3010
      - USER_SERVICE_URL=http://user-service:3001
      - ORDER_SERVICE_URL=http://order-service:3002
      - PAYMENT_SERVICE_URL=http://payment-service:3003
      - PRODUCT_SERVICE_URL=http://product-service:3004
      - GATEWAY_URL=http://gateway:3000
    depends_on:
      - vault-service
      - user-service
      # - order-service
      # - payment-service
      # - product-service
      # - gateway
    networks:
      - monitoring
      - backend

  postgres:
    image: postgres:14
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: ecommerce
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  pgadmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: "kazunoriosaki@gmail.com"
      PGADMIN_DEFAULT_PASSWORD: "password"
    ports:
      - "5050:80"
    depends_on:
      - postgres

  redis-commander:
    image: rediscommander/redis-commander
    environment:
      - REDIS_HOSTS=redis:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis

  prometheus:
    image: prom/prometheus
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
    networks:
      - monitoring

  grafana:
    image: grafana/grafana
    depends_on:
      - prometheus
    ports:
      - "3002:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - monitoring

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  monitoring:
    driver: bridge
  backend:
    driver: bridge
